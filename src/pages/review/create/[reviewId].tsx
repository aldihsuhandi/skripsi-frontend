import { ImagePreview } from "@/Components/ImagePreview";
import { ReturnArrayImageIdFromArrayFile, urlFirstString } from "@/helper";
import { CreateReviewCall } from "@/helper/ReviewsHelper";
import { CreateReviewFormValues } from "@/types/Reviews";
import { Field, FieldArray, Form, Formik } from "formik";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import { HiArrowLeftOnRectangle, HiXCircle } from "react-icons/hi2";
import * as Yup from "yup";
import styles from "../../../styles/Form.module.css";
import { HiFolderAdd } from "react-icons/hi";
import { toast } from "react-toastify";

const MAX_FILE_SIZE = 2 * 1024 * 1024; // 2MB
const SUPPORTED_FORMATS = ["image/jpg", "image/jpeg", "image/png"];

const initialValues: CreateReviewFormValues = {
  review: 0,
  interestLevel: "",
  description: "",
  images: [],
};

const CreateReviewSchema = Yup.object().shape({
  review: Yup.number()
    .required("Please Give it a Rating between 1 to 5")
    .min(1, "Minimum Rating That You Can Give is One!")
    .max(5, "Maximum Rating That You Can Give is Five!"),

  interestLevel: Yup.string().required("Interest Level is Required!"),

  description: Yup.string().notRequired(),

  images: Yup.mixed<File[]>()
    .notRequired()
    .test("fileSize", "One of the file exceeds the 2MB limit", (value) => {
      if (value && value?.length > 0) {
        for (let i = 0; i < value.length; i++) {
          if (value[i].size > 5242880) {
            return false;
          }
        }
      }
      return true;
    })
    .test(
      "fileType",
      "One of the file has unsupported file format",
      (value) => {
        if (value && value.length > 0) {
          for (let i = 0; i < value.length; i++) {
            if (
              value[i].type != "image/png" &&
              value[i].type != "image/jpg" &&
              value[i].type != "image/jpeg"
            ) {
              return false;
            }
          }
        }
        return true;
      }
    )
    .test("arrayLength", "Maximum is 10 images!", (value) => {
      if (value && value.length < 10) {
        return true;
      } else {
        return false;
      }
    }),
});

export default function CreateReview() {
  const router = useRouter();
  const { reviewId } = router.query;
  const [currentRevId, setCurrentRevId] = useState<string>("");
  const imgRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const tempRevId = urlFirstString(reviewId);
    if (tempRevId) {
      setCurrentRevId(tempRevId);
    }
  }, [router.isReady]);

  return (
    <>
      <Head>
        <title>Create Your Review</title>{" "}
        {/* --> [Improvement]Nanti ganti jadi: "Review: Nama Item nya"*/}
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="mx-auto p-4">
          <div className="mx-auto flex min-h-screen min-w-fit max-w-4xl flex-col rounded-lg bg-white shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)]">
            <div className="sticky top-0 flex h-[41.6px] w-full flex-col items-center rounded-t-lg border-b-2 border-b-normal-blue shadow-md">
              <h1 className="pt-2">CREATE YOUR REVIEW FOR THIS PRODUCT</h1>
            </div>
            <div className="flex p-2">
              <button className="rounded-md border-normal-blue bg-normal-blue p-2 hover:border-bright-blue hover:bg-bright-blue">
                <span className="flex flex-row items-center">
                  <HiArrowLeftOnRectangle size={20} className="fill-white" />
                  <p className="pl-1 text-white">Go Back</p>
                </span>
              </button>
            </div>
            <div className="px-2 pb-2">
              <div className="flex h-full flex-col rounded-md border shadow-md">
                <Formik
                  initialValues={initialValues}
                  validationSchema={CreateReviewSchema}
                  onSubmit={async (values) => {
                    //upload images
                    let imageIds: string[] = [];
                    if (values.images) {
                      const result = await ReturnArrayImageIdFromArrayFile(
                        values.images
                      );
                      if (result) {
                        imageIds = result;
                      }
                      const resultFromCreate = await CreateReviewCall({
                        reviewId: currentRevId,
                        review: values.review,
                        interestLevel: values.interestLevel,
                        description: values.description,
                        images: imageIds,
                      });
                    }
                  }}
                >
                  {({ setFieldValue, values }) => (
                    <Form>
                      <FieldArray name="images">
                        {({ remove }) => {
                          return (
                            <div className="flex flex-row flex-wrap">
                              {[...values.images].map((file, index) => {
                                return (
                                  <div
                                    key={index}
                                    className="cursor relative m-2 h-[80px] w-[80px]"
                                  >
                                    <ImagePreview
                                      previewFile={file}
                                      altMessage={`${file.name} - ${index}`}
                                      width={80}
                                      height={80}
                                      className="h-full w-full object-scale-down"
                                    />
                                    <div
                                      className={styles.overlay}
                                      onClick={() => {
                                        remove(index);
                                      }}
                                    >
                                      <HiXCircle size={30} />
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          );
                        }}
                      </FieldArray>

                      <div
                        className="flex cursor-pointer flex-row"
                        onClick={() => {
                          if (imgRef.current) {
                            imgRef.current.click();
                          }
                        }}
                      >
                        <HiFolderAdd size={25} /> Add Images
                        <Field
                          innerRef={imgRef}
                          type="file"
                          name="images"
                          hidden
                          multiple
                          value={undefined}
                          accept="image/png, image/jpg, image/jpeg"
                          onChange={(
                            event: React.ChangeEvent<HTMLInputElement>
                          ) => {
                            if (values.images.length < 3) {
                              const currentImg = event.target.files;
                              const beforeImg = values.images;
                              if (currentImg) {
                                const imgsArray = beforeImg.concat(
                                  Array.from(currentImg)
                                );
                                setFieldValue("images", imgsArray);
                              }
                            } else {
                              toast.warning("The maximum is 3 images", {
                                position: "top-center",
                                autoClose: 3000,
                                hideProgressBar: false,
                                theme: "colored",
                              });
                            }
                          }}
                        />
                      </div>
                    </Form>
                  )}
                </Formik>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
