import { ReviewCard } from "@/Components/ReviewsComponent/ReviewCard";
import { NotFoundWidget } from "@/Components/Widget";
import { parseNumberUndefined, urlFirstString } from "@/helper";
import { QueryReviewCall } from "@/helper/ReviewsHelper";
import { SessionValidate } from "@/helper/SessionHelper";
import { QueryReviewResult } from "@/types/Reviews";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import ReactPaginate from "react-paginate";
import styles from "../../styles/Paginate.module.css";

export default function NeedReviews() {
  const router = useRouter();
  // const [userData, setUserData] = useState<UserSummary | undefined>(undefined);
  // const [isLoggedIn, setIsLoggedIn] = useState(false);
  const { page, reviewed } = router.query;
  const [currentPage, setCurrentPage] = useState(0);
  const [review, setReview] = useState<QueryReviewResult>();
  const [needReview, setNeedReview] = useState<boolean>(true);

  useEffect(() => {
    const checkSession = async () => {
      const isValidSession = await SessionValidate();
      if (!isValidSession) {
        router.push("/login");
      }
    };

    const fetchQueriesPage = async () => {
      const tempPage = parseNumberUndefined(urlFirstString(page)) ?? 0;
      setCurrentPage(tempPage === 0 ? 0 : tempPage - 1);
    };

    const fetchReviewed = async () => {
      const r = urlFirstString(reviewed) ?? "false";
      setNeedReview(!(r === "true"));
    };

    const queryNeedReviews = async () => {
      await fetchQueriesPage();
      await fetchReviewed();
      if ((reviewed === "true") === !needReview) {
        const result = await QueryReviewCall(
          "USER",
          needReview,
          currentPage + 1
        );
        if (result && result.resultContext.success) {
          setReview(result);
        }
      }
    };

    if (router.isReady) {
      checkSession();
      queryNeedReviews();
    }
  }, [router.isReady, page, reviewed, needReview]);

  const changeNeedReview = (r: boolean) => {
    router.push({
      pathname: `/review`,
      query: {
        reviewed: String(!r),
        page: 1,
      },
    });
  };

  const ReviewWidget = () => {
    if (review && review.reviews && review.reviews.length != 0) {
      return review.reviews.map((data) => (
        <ReviewCard key={data.reviewId} reviewData={data} />
      ));
    }
    return (
      <>
        <NotFoundWidget name="review" />
      </>
    );
  };

  const handlePageChange = (selectedPage: { selected: number }) => {
    setCurrentPage(selectedPage.selected);
    router.push({
      pathname: `/review`,
      query: {
        ...router.query,
        page: selectedPage.selected + 1,
      },
    });
  };

  const getSelected = (button: boolean) => {
    return needReview === button
      ? "bg-blue-200 border-blue-500 text-blue-500"
      : "bg-white border-gray-200 text-gray-500 ";
  };

  return (
    <>
      <Head>
        <title>Review Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="p-4">
          <div className="mx-auto flex min-h-screen min-w-fit max-w-4xl flex-col rounded-lg bg-white py-3 px-2 ">
            {/* <ReviewPageNavigation /> */}
            <div className="flex w-full flex-row flex-wrap items-center pb-2 pl-1">
              <button
                className={`${getSelected(
                  true
                )} mx-1 my-1 rounded-lg border-2 border-solid py-1 px-2 md:my-0 `}
                onClick={() => {
                  changeNeedReview(true);
                }}
              >
                Waiting to be reviewed
              </button>
              <button
                className={`${getSelected(
                  false
                )} mx-1 my-1 rounded-lg border-2 border-solid py-1 px-2 md:my-0 `}
                onClick={() => {
                  changeNeedReview(false);
                }}
              >
                See Reviews
              </button>
            </div>
            {/* <h1>INI PAGE ISINYA BWT ITEM2 YG BLM DI REVIEW</h1> */}
            <div className="m-2 rounded-md border-2 border-solid border-gray-200 p-3 shadow-md">
              {ReviewWidget()}
            </div>
            <div>
              {review && (
                <ReactPaginate
                  pageCount={review.pagingContext.totalPage}
                  onPageChange={handlePageChange}
                  // initialPage={currentPage}
                  forcePage={currentPage}
                  nextLabel=">"
                  previousLabel="<"
                  breakLabel="..."
                  // disableInitialCallback
                  // Stylings
                  containerClassName={styles.pagination}
                  pageLinkClassName={styles.pagelink}
                  activeClassName={styles.active}
                  activeLinkClassName={styles.active}
                  breakClassName={styles.pagelink}
                  previousLinkClassName={styles.pagelink}
                  nextLinkClassName={styles.pagelink}
                  disabledLinkClassName={styles.disabled}
                  renderOnZeroPageCount={null}
                />
              )}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
