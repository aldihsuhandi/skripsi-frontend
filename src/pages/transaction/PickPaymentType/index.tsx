import { FilterDictionary } from "@/helper/FilterDictionary/FIlterDictionaryCall";
import { PaymentTypeFormValues } from "@/types/Transaction";
import { ErrorMessage, Field, Form, Formik } from "formik";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import * as Yup from "yup";
import styles from "../../../styles/Form.module.css";
import { TransactionPayment } from "@/helper";
import { toast } from "react-toastify";

const initialValues: PaymentTypeFormValues = {
  paymentType: "",
};

const PaymentTypeSchema = Yup.object().shape({
  paymentType: Yup.string().required("Please choose a Payment Type!"),
});

export default function PickPaymentType() {
  // Ini spesific 1 item dari sebuah merchang
  // Product Card redirect kesini
  const router = useRouter();

  const { transId } = router.query;

  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [dictionryLoading, setDictionaryLoading] = useState<boolean>(true);
  const [paymentTypeList, setPaymentTypeList] = useState<string[]>([]);

  async function getDictionaries() {
    const payListRes = await FilterDictionary({ dictionaryKey: "PAYMENT" });

    payListRes?.resultContext.success
      ? setPaymentTypeList(payListRes.dictionaries)
      : setPaymentTypeList([
          "There was an error fetching this data, try refreshing or try again later.",
        ]);
  }

  useEffect(() => {
    setIsLoading(true);

    if (transId) {
      setIsLoading(false);
    }

    async function resolveDictionary() {
      setDictionaryLoading(true);
      await getDictionaries();
      setDictionaryLoading(false);
    }

    resolveDictionary();
  }, [transId]);

  return (
    <>
      <Head>
        <title>Pick Payment Type</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {!isLoading && (
          <div className="m-0 flex min-h-screen flex-col py-0 lg:mx-auto lg:max-w-screen-lg lg:py-7 xl:max-w-screen-xl 2xl:max-w-screen-2xl">
            <div>
              <p className="mb-2 font-semibold">Pick Payment Type!</p>
              {!dictionryLoading && (
                <Formik
                  initialValues={initialValues}
                  validationSchema={PaymentTypeSchema}
                  onSubmit={async (values) => {
                    if (transId) {
                      const transIdstring = Array.isArray(transId)
                        ? transId[0]
                        : transId;
                      const pickPaymentResult = await TransactionPayment({
                        transactionId: transIdstring,
                        paymentType: values.paymentType,
                      });

                      if (
                        pickPaymentResult &&
                        pickPaymentResult.resultContext.success
                      ) {
                        router.push({
                          pathname: `/transaction/${transIdstring}`,
                        });
                      } else {
                        toast.error(
                          "A problem occured when completing your transaction, please try again later",
                          {
                            position: "top-center",
                            autoClose: 5000,
                            hideProgressBar: false,
                            theme: "colored",
                          }
                        );
                      }
                    } else {
                      toast.error(
                        "We were unable to get your transaction Id, please try again later",
                        {
                          position: "top-center",
                          autoClose: 5000,
                          hideProgressBar: false,
                          theme: "colored",
                        }
                      );
                    }
                  }}
                >
                  {({ setFieldValue, values }) => (
                    <Form>
                      <div className="px-2 lg:px-0">
                        {paymentTypeList.map((data, index) => {
                          let imageSrc: string;
                          if (data === "BCA Virtual Account") {
                            imageSrc = "/bca_mini.png";
                          } else if (data === "BNI Virtual Account") {
                            imageSrc = "/bni_mini.png";
                          } else {
                            imageSrc = "logo not found";
                          }
                          return (
                            <div
                              className="flex w-fit flex-row py-1"
                              key={index}
                              onClick={() => {
                                setFieldValue("paymentType", data);
                              }}
                            >
                              <div className="mr-2 self-center">
                                <input
                                  type="radio"
                                  name="paymentType"
                                  checked={data === values.paymentType}
                                />
                              </div>
                              <div className="flex min-w-[320px] max-w-[320px] flex-col rounded border-2 border-normal-white p-4">
                                <img src={imageSrc} alt="Payment-Type-Logo" />
                                <p>{data}</p>
                              </div>
                            </div>
                          );
                        })}
                        <ErrorMessage
                          name="paymentType"
                          component="div"
                          className="text-red-600"
                        />
                        {/*---> Confirm Button <---*/}
                        <div
                          className="input-button"
                          style={{
                            maxWidth: 320,
                            paddingTop: 8,
                          }}
                        >
                          <button type="submit" className={styles.button}>
                            Confirm
                          </button>
                        </div>
                      </div>
                    </Form>
                  )}
                </Formik>
              )}
            </div>
          </div>
        )}
        {isLoading && <>Loading</>}
      </main>
    </>
  );
}
